// Generated by Haxe 3.4.2
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var AudioManager = function() {
	this.bufferList = new haxe_ds_StringMap();
	this.types = new haxe_ds_StringMap();
	var _this = this.types;
	if(__map_reserved["mp3"] != null) {
		_this.setReserved("mp3","audio/mpeg");
	} else {
		_this.h["mp3"] = "audio/mpeg";
	}
	var _this1 = this.types;
	if(__map_reserved["ogg"] != null) {
		_this1.setReserved("ogg","audio/ogg");
	} else {
		_this1.h["ogg"] = "audio/ogg";
	}
	var _this2 = this.types;
	if(__map_reserved["wav"] != null) {
		_this2.setReserved("wav","audio/wav");
	} else {
		_this2.h["wav"] = "audio/wav";
	}
	var _this3 = this.types;
	if(__map_reserved["aac"] != null) {
		_this3.setReserved("aac","audio/aac");
	} else {
		_this3.h["aac"] = "audio/aac";
	}
	var _this4 = this.types;
	if(__map_reserved["m4a"] != null) {
		_this4.setReserved("m4a","audio/x-m4a");
	} else {
		_this4.h["m4a"] = "audio/x-m4a";
	}
};
AudioManager.__name__ = true;
AudioManager.prototype = {
	checkWebAudioAPISupport: function() {
		if(Reflect.field(window,"AudioContext") == null) {
			return Reflect.field(window,"webkitAudioContext") != null;
		} else {
			return true;
		}
	}
	,unlockAudio: function() {
		if(this.audioContext != null) {
			var bfr = this.audioContext.createBuffer(1,1,Waud.preferredSampleRate);
			var src = this.audioContext.createBufferSource();
			src.buffer = bfr;
			src.connect(this.audioContext.destination);
			if(Reflect.field(src,"start") != null) {
				src.start(0);
			} else {
				src.noteOn(0);
			}
			if(src.onended != null) {
				src.onended = $bind(this,this._unlockCallback);
			} else {
				haxe_Timer.delay($bind(this,this._unlockCallback),1);
			}
		} else {
			var audio = window.document.createElement("audio");
			var source = window.document.createElement("source");
			source.src = "data:audio/wave;base64,UklGRjIAAABXQVZFZm10IBIAAAABAAEAQB8AAEAfAAABAAgAAABmYWN0BAAAAAAAAABkYXRhAAAAAA==";
			audio.appendChild(source);
			window.document.appendChild(audio);
			audio.play();
			if(Waud.__touchUnlockCallback != null) {
				Waud.__touchUnlockCallback();
			}
			Waud.dom.ontouchend = null;
		}
	}
	,_unlockCallback: function() {
		if(Waud.__touchUnlockCallback != null) {
			Waud.__touchUnlockCallback();
		}
		Waud.dom.ontouchend = null;
	}
	,createAudioContext: function() {
		if(this.audioContext == null) {
			try {
				if(Reflect.field(window,"AudioContext") != null) {
					this.audioContext = new AudioContext();
				} else if(Reflect.field(window,"webkitAudioContext") != null) {
					this.audioContext = new webkitAudioContext();
				}
				this.masterGainNode = this.createGain();
			} catch( e ) {
				this.audioContext = null;
			}
		}
		return this.audioContext;
	}
	,createGain: function() {
		if(($_=this.audioContext,$bind($_,$_.createGain)) != null) {
			return this.audioContext.createGain();
		} else {
			var o = this.audioContext;
			return Reflect.field(this.audioContext,"createGainNode").apply(o,[]);
		}
	}
	,destroy: function() {
		if(this.audioContext != null && (this.audioContext.close != null && this.audioContext.close != "")) {
			this.audioContext.close();
		}
		this.audioContext = null;
		this.bufferList = null;
		this.types = null;
	}
	,suspendContext: function() {
		if(this.audioContext != null) {
			if(this.audioContext.suspend != null) {
				this.audioContext.suspend();
			}
		}
	}
	,resumeContext: function() {
		if(this.audioContext != null) {
			if(this.audioContext.resume != null) {
				this.audioContext.resume();
			}
		}
	}
	,__class__: AudioManager
};
var AudioPlayer = function() {
	this.songs = ["80s-Music","Incidental","Nature-Ambient","Windswept"];
	this.FFT_SIZE = 256;
	this.SMOOTHING = 0.8;
	this.currentSong = 0;
	Waud.init();
	this.load = window.document.getElementById("load");
	this.title = window.document.getElementById("title");
	this.play = window.document.getElementById("play");
	this.previous = window.document.getElementById("previous");
	this.next = window.document.getElementById("next");
	this.canvas = window.document.getElementById("visualisation");
	this.canvas.width = window.innerWidth <= 320 ? window.innerWidth - 60 | 0 : 320;
	this.title.innerText = "NO AUDIO";
	if(!Waud.isWebAudioSupported) {
		this.load.innerText = "No Web Audio";
		this.load.className = "button small disabled";
		return;
	}
	this.load.onclick = $bind(this,this.loadSounds);
};
AudioPlayer.__name__ = true;
AudioPlayer.main = function() {
	new AudioPlayer();
};
AudioPlayer.prototype = {
	loadSounds: function() {
		var sounds = new WaudBase64Pack("player/sounds/sounds.json",$bind(this,this.onLoad),$bind(this,this.onProgress));
		this.drawContext = this.canvas.getContext("2d",null);
		this.audioContext = Waud.audioContext;
		this.analyser = this.audioContext.createAnalyser();
		this.analyser.connect(this.audioContext.destination);
		this.analyser.minDecibels = -140;
		this.analyser.maxDecibels = 0;
		this.freqs = new Uint8Array(this.analyser.frequencyBinCount);
		this.times = new Uint8Array(this.analyser.frequencyBinCount);
		this.isPlaying = false;
		this.startTime = 0;
		this.startOffset = 0;
		this.load.onclick = null;
		this.load.innerText = "Loading Sounds 0%";
	}
	,onLoad: function(snds) {
		this.soundPack = snds;
		this.play.onclick = $bind(this,this.playSong);
		this.next.onclick = $bind(this,this.nextSong);
		this.previous.onclick = $bind(this,this.prevSong);
		this.load.innerText = "Ready to Play Now";
		this.play.className = "button special icon small fa-play";
		this.previous.className = "button special icon small fa-step-backward";
		this.next.className = "button special icon small fa-step-forward";
		this.load.className = "button small disabled";
	}
	,onProgress: function(val) {
		var per = Math.floor(val * 100);
		if(per == 100) {
			this.load.innerText = "please wait...";
		} else {
			this.load.innerText = per < 10 ? "Loading Sounds 0" + per + "%" : "Loading Sounds " + per + "%";
		}
	}
	,playSong: function() {
		if(!this.isPlaying) {
			this.play.className = "button special icon small fa-pause";
			this.play.innerHTML = "Pause";
			var key = "sounds/" + this.songs[this.currentSong] + ".mp3";
			var _this = this.soundPack;
			var snd = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			snd.onEnd($bind(this,this.autoPlayNextSong));
			this.start(snd);
			this.title.innerText = StringTools.replace(this.songs[this.currentSong],"-"," ");
		} else {
			this.play.className = "button special icon small fa-play";
			this.play.innerHTML = "Play";
			this.pause();
		}
	}
	,autoPlayNextSong: function(snd) {
		this.nextSong();
	}
	,nextSong: function() {
		this.currentSong++;
		if(this.currentSong >= this.songs.length) {
			this.currentSong = 0;
		}
		this.stop();
		this.playSong();
	}
	,prevSong: function() {
		this.currentSong--;
		if(this.currentSong < 0) {
			this.currentSong = this.songs.length - 1;
		}
		this.stop();
		this.playSong();
	}
	,start: function(s) {
		this.snd = s;
		this.startTime = this.audioContext.currentTime;
		this.snd.play();
		this.snd.source.connect(this.analyser);
		window.requestAnimationFrame($bind(this,this.draw));
		this.isPlaying = true;
		this.canvas.style.visibility = "visible";
	}
	,pause: function() {
		this.snd.pause();
		this.startOffset += this.snd.getTime() - this.startTime;
		this.isPlaying = false;
	}
	,stop: function() {
		this.snd.stop();
		this.startOffset += this.snd.getTime() - this.startTime;
		this.isPlaying = false;
		this.canvas.style.visibility = "hidden";
	}
	,draw: function(t) {
		if(window.innerWidth <= 320) {
			this.FFT_SIZE = 128;
		} else if(window.innerWidth <= 960) {
			this.FFT_SIZE = 256;
		} else {
			this.FFT_SIZE = 512;
		}
		this.analyser.smoothingTimeConstant = this.SMOOTHING;
		this.analyser.fftSize = this.FFT_SIZE;
		this.analyser.getByteFrequencyData(this.freqs);
		this.analyser.getByteTimeDomainData(this.times);
		this.WIDTH = this.canvas.width;
		this.HEIGHT = this.canvas.height;
		this.canvas.width = this.WIDTH;
		this.canvas.height = this.HEIGHT;
		var _g1 = 0;
		var _g = this.analyser.frequencyBinCount;
		while(_g1 < _g) {
			var i = _g1++;
			var value = this.times[i];
			var percent = value / 256;
			var height = this.HEIGHT * percent;
			var offset = this.HEIGHT - height - 1;
			var barWidth = this.WIDTH / this.analyser.frequencyBinCount;
			this.drawContext.fillStyle = "#E70000";
			this.drawContext.fillRect(i * barWidth,offset,1,2);
		}
		if(this.isPlaying) {
			window.requestAnimationFrame($bind(this,this.draw));
		}
	}
	,getFrequencyValue: function(freq) {
		var nyquist = this.audioContext.sampleRate / 2;
		var index = Math.round(freq / nyquist * this.freqs.length);
		return this.freqs[index];
	}
	,__class__: AudioPlayer
};
var BaseSound = function(sndUrl,options) {
	this._b64 = new EReg("(^data:audio).*(;base64,)","i");
	if(sndUrl == null || sndUrl == "") {
		console.log("invalid sound url");
		return;
	}
	if(Waud.audioManager == null) {
		console.log("initialise Waud using Waud.init() before loading sounds");
		return;
	}
	this.isSpriteSound = false;
	this.url = sndUrl;
	this._isLoaded = false;
	this._isPlaying = false;
	this._muted = false;
	this._duration = 0;
	this._options = WaudUtils.setDefaultOptions(options);
	this.rate = this._options.playbackRate;
};
BaseSound.__name__ = true;
BaseSound.prototype = {
	isReady: function() {
		return this._isLoaded;
	}
	,__class__: BaseSound
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var IWaudSound = function() { };
IWaudSound.__name__ = true;
IWaudSound.prototype = {
	__class__: IWaudSound
};
var HTML5Sound = function(url,options,src) {
	BaseSound.call(this,url,options);
	this._snd = Waud.dom.createElement("audio");
	if(src == null) {
		this._addSource(url);
	} else {
		this._snd.appendChild(src);
	}
	if(this._options.preload) {
		this.load();
	}
	if(this._b64.match(url)) {
		url = "";
	}
};
HTML5Sound.__name__ = true;
HTML5Sound.__interfaces__ = [IWaudSound];
HTML5Sound.__super__ = BaseSound;
HTML5Sound.prototype = $extend(BaseSound.prototype,{
	load: function(callback) {
		var _gthis = this;
		if(!this._isLoaded) {
			this._snd.autoplay = this._options.autoplay;
			this._snd.loop = this._options.loop;
			this._snd.volume = this._options.volume;
			this._snd.playbackRate = this.rate;
			if(callback != null) {
				this._options.onload = callback;
			}
			if(this._options.preload) {
				this._snd.preload = "auto";
			} else {
				this._snd.preload = "metadata";
			}
			if(this._options.onload != null) {
				this._isLoaded = true;
				this._snd.onloadeddata = function() {
					_gthis._options.onload(_gthis);
				};
			}
			this._snd.onplaying = function() {
				_gthis._isLoaded = true;
				_gthis._isPlaying = true;
			};
			this._snd.onended = function() {
				_gthis._isPlaying = false;
				if(_gthis._options.onend != null) {
					_gthis._options.onend(_gthis);
				}
			};
			if(this._options.onerror != null) {
				this._snd.onerror = function() {
					_gthis._options.onerror(_gthis);
				};
			}
			this._snd.load();
		}
		return this;
	}
	,getDuration: function() {
		if(!this._isLoaded) {
			return 0;
		}
		this._duration = this._snd.duration;
		return this._duration;
	}
	,_addSource: function(url) {
		this.source = Waud.dom.createElement("source");
		this.source.src = url;
		var this1 = Waud.audioManager.types;
		var key = this._getExt(url);
		var _this = this1;
		if((__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]) != null) {
			var this2 = Waud.audioManager.types;
			var key1 = this._getExt(url);
			var _this1 = this2;
			var tmp = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			this.source.type = tmp;
		}
		this._snd.appendChild(this.source);
		return this.source;
	}
	,_getExt: function(filename) {
		return filename.split(".").pop();
	}
	,setVolume: function(val,spriteName) {
		if(val >= 0 && val <= 1) {
			this._options.volume = val;
		}
		if(!this._isLoaded) {
			return;
		}
		this._snd.volume = this._options.volume;
	}
	,getVolume: function(spriteName) {
		return this._options.volume;
	}
	,mute: function(val,spriteName) {
		if(!this._isLoaded) {
			return;
		}
		this._snd.muted = val;
		if(WaudUtils.isiOS()) {
			if(val && this.isPlaying()) {
				this._muted = true;
				this._snd.pause();
			} else if(this._muted) {
				this._muted = false;
				this._snd.play();
			}
		}
	}
	,toggleMute: function(spriteName) {
		this.mute(!this._muted);
	}
	,play: function(sprite,soundProps) {
		var _gthis = this;
		this.spriteName = sprite;
		if(!this._isLoaded || this._snd == null) {
			console.log("sound not loaded");
			return -1;
		}
		if(this._isPlaying) {
			if(this._options.autostop) {
				this.stop(this.spriteName);
			} else {
				var n = js_Boot.__cast(this._snd.cloneNode(true) , HTMLAudioElement);
				haxe_Timer.delay($bind(n,n.play),100);
			}
		}
		if(this._muted) {
			return -1;
		}
		if(this.isSpriteSound && soundProps != null) {
			this._snd.currentTime = this._pauseTime == null ? soundProps.start : this._pauseTime;
			if(this._tmr != null) {
				this._tmr.stop();
			}
			this._tmr = haxe_Timer.delay(function() {
				if(soundProps.loop != null && soundProps.loop) {
					_gthis.play(_gthis.spriteName,soundProps);
				} else {
					_gthis.stop(_gthis.spriteName);
				}
			},Math.ceil(soundProps.duration * 1000));
		}
		haxe_Timer.delay(($_=this._snd,$bind($_,$_.play)),100);
		this._pauseTime = null;
		return 0;
	}
	,togglePlay: function(spriteName) {
		if(this._isPlaying) {
			this.pause();
		} else {
			this.play();
		}
	}
	,isPlaying: function(spriteName) {
		return this._isPlaying;
	}
	,loop: function(val) {
		if(!this._isLoaded || this._snd == null) {
			return;
		}
		this._snd.loop = val;
	}
	,autoStop: function(val) {
		this._options.autostop = val;
	}
	,stop: function(spriteName) {
		if(!this._isLoaded || this._snd == null) {
			return;
		}
		this._snd.currentTime = 0;
		this._snd.pause();
		this._isPlaying = false;
		if(this._tmr != null) {
			this._tmr.stop();
		}
	}
	,pause: function(spriteName) {
		if(!this._isLoaded || this._snd == null) {
			return;
		}
		this._snd.pause();
		this._pauseTime = this._snd.currentTime;
		this._isPlaying = false;
		if(this._tmr != null) {
			this._tmr.stop();
		}
	}
	,playbackRate: function(val,spriteName) {
		if(val == null) {
			return this.rate;
		}
		this._snd.playbackRate = val;
		return this.rate = val;
	}
	,setTime: function(time) {
		if(!this._isLoaded || this._snd == null || time > this._snd.duration) {
			return;
		}
		this._snd.currentTime = time;
	}
	,getTime: function() {
		if(this._snd == null || !this._isLoaded || !this._isPlaying) {
			return 0;
		}
		return this._snd.currentTime;
	}
	,onEnd: function(callback,spriteName) {
		this._options.onend = callback;
		return this;
	}
	,onLoad: function(callback) {
		this._options.onload = callback;
		return this;
	}
	,onError: function(callback) {
		this._options.onerror = callback;
		return this;
	}
	,destroy: function() {
		if(this._snd != null) {
			this._snd.pause();
			this._snd.removeChild(this.source);
			this.source = null;
			this._snd = null;
		}
		this._isPlaying = false;
	}
	,__class__: HTML5Sound
});
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Waud = $hx_exports["Waud"] = function() { };
Waud.__name__ = true;
Waud.init = function(d) {
	if(Waud.__audioElement == null) {
		if(d == null) {
			d = window.document;
		}
		Waud.dom = d;
		Waud.__audioElement = Waud.dom.createElement("audio");
		if(Waud.audioManager == null) {
			Waud.audioManager = new AudioManager();
		}
		Waud.isWebAudioSupported = Waud.audioManager.checkWebAudioAPISupport();
		Waud.isHTML5AudioSupported = Reflect.field(window,"Audio") != null;
		if(Waud.isWebAudioSupported) {
			Waud.audioContext = Waud.audioManager.createAudioContext();
		}
		Waud.sounds = new haxe_ds_StringMap();
		Waud._volume = 1;
		var support = Waud.isWebAudioSupported ? "Web Audio" : "HTML5 Audio";
		if(window.navigator.userAgent.toLowerCase().indexOf("chrome") > 1) {
			var e = ["\n %c %c %c WAUD%c.%cJS%c v" + Waud.version + " - " + support + " %c  %c http://www.waudjs.com %c %c %c 📢 \n\n","background: #32BEA6; padding:5px 0;","background: #32BEA6; padding:5px 0;","color: #E70000; background: #29162B; padding:5px 0;","color: #F3B607; background: #29162B; padding:5px 0;","color: #32BEA6; background: #29162B; padding:5px 0;","color: #999999; background: #29162B; padding:5px 0;","background: #32BEA6; padding:5px 0;","background: #B8FCEF; padding:5px 0;","background: #32BEA6; padding:5px 0;","color: #E70000; background: #32BEA6; padding:5px 0;","color: #FF2424; background: #FFFFFF; padding:5px 0;"];
			window.console.log.apply(window.console,e);
		} else {
			window.console.log("WAUD.JS v" + Waud.version + " - " + support + " - http://www.waudjs.com");
		}
	}
};
Waud._sayHello = function() {
	var support = Waud.isWebAudioSupported ? "Web Audio" : "HTML5 Audio";
	if(window.navigator.userAgent.toLowerCase().indexOf("chrome") > 1) {
		var e = ["\n %c %c %c WAUD%c.%cJS%c v" + Waud.version + " - " + support + " %c  %c http://www.waudjs.com %c %c %c 📢 \n\n","background: #32BEA6; padding:5px 0;","background: #32BEA6; padding:5px 0;","color: #E70000; background: #29162B; padding:5px 0;","color: #F3B607; background: #29162B; padding:5px 0;","color: #32BEA6; background: #29162B; padding:5px 0;","color: #999999; background: #29162B; padding:5px 0;","background: #32BEA6; padding:5px 0;","background: #B8FCEF; padding:5px 0;","background: #32BEA6; padding:5px 0;","color: #E70000; background: #32BEA6; padding:5px 0;","color: #FF2424; background: #FFFFFF; padding:5px 0;"];
		window.console.log.apply(window.console,e);
	} else {
		window.console.log("WAUD.JS v" + Waud.version + " - " + support + " - http://www.waudjs.com");
	}
};
Waud.autoMute = function() {
	Waud._focusManager = new WaudFocusManager();
	Waud._focusManager.focus = function() {
		Waud.mute(false);
	};
	Waud._focusManager.blur = function() {
		Waud.mute(true);
	};
};
Waud.enableTouchUnlock = function(callback) {
	Waud.__touchUnlockCallback = callback;
	Waud.dom.ontouchend = ($_=Waud.audioManager,$bind($_,$_.unlockAudio));
};
Waud.setVolume = function(val) {
	if((typeof(val) == "number" && ((val | 0) === val) || typeof(val) == "number") && val >= 0 && val <= 1) {
		Waud._volume = val;
		if(Waud.sounds != null) {
			var _this = Waud.sounds;
			var sound = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(sound.hasNext()) {
				var sound1 = sound.next();
				sound1.setVolume(val);
			}
		}
	} else {
		window.console.warn("Volume should be a number between 0 and 1. Received: " + val);
	}
};
Waud.getVolume = function() {
	return Waud._volume;
};
Waud.mute = function(val) {
	if(val == null) {
		val = true;
	}
	Waud.isMuted = val;
	if(Waud.sounds != null) {
		var _this = Waud.sounds;
		var sound = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sound.hasNext()) {
			var sound1 = sound.next();
			sound1.mute(val);
		}
	}
};
Waud.playbackRate = function(val) {
	if(val == null) {
		return Waud._playbackRate;
	} else if(Waud.sounds != null) {
		var _this = Waud.sounds;
		var sound = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sound.hasNext()) {
			var sound1 = sound.next();
			sound1.playbackRate(val);
		}
	}
	return Waud._playbackRate = val;
};
Waud.stop = function() {
	if(Waud.sounds != null) {
		var _this = Waud.sounds;
		var sound = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sound.hasNext()) {
			var sound1 = sound.next();
			sound1.stop();
		}
	}
};
Waud.pause = function() {
	if(Waud.sounds != null) {
		var _this = Waud.sounds;
		var sound = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sound.hasNext()) {
			var sound1 = sound.next();
			sound1.pause();
		}
	}
};
Waud.getFormatSupportString = function() {
	var support = "OGG: " + Waud.__audioElement.canPlayType("audio/ogg; codecs=\"vorbis\"");
	support += ", WAV: " + Waud.__audioElement.canPlayType("audio/wav; codecs=\"1\"");
	support += ", MP3: " + Waud.__audioElement.canPlayType("audio/mpeg;");
	support += ", AAC: " + Waud.__audioElement.canPlayType("audio/aac;");
	support += ", M4A: " + Waud.__audioElement.canPlayType("audio/x-m4a;");
	return support;
};
Waud.isSupported = function() {
	if(Waud.isWebAudioSupported == null || Waud.isHTML5AudioSupported == null) {
		Waud.isWebAudioSupported = Waud.audioManager.checkWebAudioAPISupport();
		Waud.isHTML5AudioSupported = Reflect.field(window,"Audio") != null;
	}
	if(!Waud.isWebAudioSupported) {
		return Waud.isHTML5AudioSupported;
	} else {
		return true;
	}
};
Waud.isOGGSupported = function() {
	var canPlay = Waud.__audioElement.canPlayType("audio/ogg; codecs=\"vorbis\"");
	if(Waud.isHTML5AudioSupported && canPlay != null) {
		if(canPlay != "probably") {
			return canPlay == "maybe";
		} else {
			return true;
		}
	} else {
		return false;
	}
};
Waud.isWAVSupported = function() {
	var canPlay = Waud.__audioElement.canPlayType("audio/wav; codecs=\"1\"");
	if(Waud.isHTML5AudioSupported && canPlay != null) {
		if(canPlay != "probably") {
			return canPlay == "maybe";
		} else {
			return true;
		}
	} else {
		return false;
	}
};
Waud.isMP3Supported = function() {
	var canPlay = Waud.__audioElement.canPlayType("audio/mpeg;");
	if(Waud.isHTML5AudioSupported && canPlay != null) {
		if(canPlay != "probably") {
			return canPlay == "maybe";
		} else {
			return true;
		}
	} else {
		return false;
	}
};
Waud.isAACSupported = function() {
	var canPlay = Waud.__audioElement.canPlayType("audio/aac;");
	if(Waud.isHTML5AudioSupported && canPlay != null) {
		if(canPlay != "probably") {
			return canPlay == "maybe";
		} else {
			return true;
		}
	} else {
		return false;
	}
};
Waud.isM4ASupported = function() {
	var canPlay = Waud.__audioElement.canPlayType("audio/x-m4a;");
	if(Waud.isHTML5AudioSupported && canPlay != null) {
		if(canPlay != "probably") {
			return canPlay == "maybe";
		} else {
			return true;
		}
	} else {
		return false;
	}
};
Waud.getSampleRate = function() {
	if(Waud.audioContext != null) {
		return Waud.audioContext.sampleRate;
	} else {
		return 0;
	}
};
Waud.destroy = function() {
	if(Waud.sounds != null) {
		var _this = Waud.sounds;
		var sound = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sound.hasNext()) {
			var sound1 = sound.next();
			sound1.destroy();
		}
	}
	Waud.sounds = null;
	if(Waud.audioManager != null) {
		Waud.audioManager.destroy();
	}
	Waud.audioManager = null;
	Waud.audioContext = null;
	Waud.__audioElement = null;
	if(Waud._focusManager != null) {
		Waud._focusManager.clearEvents();
		Waud._focusManager.blur = null;
		Waud._focusManager.focus = null;
		Waud._focusManager = null;
	}
};
var WaudBase64Pack = $hx_exports["WaudBase64Pack"] = function(url,onLoaded,onProgress,onError,options,sequentialLoad) {
	if(sequentialLoad == null) {
		sequentialLoad = false;
	}
	if(Waud.audioManager == null) {
		console.log("initialise Waud using Waud.init() before loading sounds");
		return;
	}
	this._sequentialLoad = sequentialLoad;
	if(url.indexOf(".json") > 0) {
		this.progress = 0;
		this._options = WaudUtils.setDefaultOptions(options);
		this._totalSize = 0;
		this._soundCount = 0;
		this._loadCount = 0;
		this._onLoaded = onLoaded;
		this._onProgress = onProgress;
		this._onError = onError;
		this._sounds = new haxe_ds_StringMap();
		this._loadBase64Json(url);
	}
};
WaudBase64Pack.__name__ = true;
WaudBase64Pack.prototype = {
	_loadBase64Json: function(base64Url) {
		var _gthis = this;
		var m = new EReg("\"meta\":.[0-9]*,[0-9]*.","i");
		var xobj = new XMLHttpRequest();
		xobj.open("GET",base64Url,true);
		if(this._onProgress != null) {
			xobj.onprogress = function(e) {
				var meta = m.match(xobj.responseText);
				if(meta && _gthis._totalSize == 0) {
					var metaInfo = JSON.parse("{" + m.matched(0) + "}");
					_gthis._totalSize = metaInfo.meta[1];
				}
				_gthis.progress = e.lengthComputable ? e.loaded / e.total : e.loaded / _gthis._totalSize;
				if(_gthis.progress > 1) {
					_gthis.progress = 1;
				}
				_gthis._onProgress(0.8 * _gthis.progress);
			};
		}
		xobj.onreadystatechange = function() {
			if(xobj.readyState == 4 && xobj.status == 200) {
				var res = JSON.parse(xobj.responseText);
				_gthis._soundsToLoad = new haxe_ds_StringMap();
				_gthis._soundIds = [];
				var _g = 0;
				var _g1 = Reflect.fields(res);
				while(_g < _g1.length) {
					var n = _g1[_g];
					++_g;
					if(n == "meta") {
						continue;
					}
					if((res instanceof Array) && res.__enum__ == null) {
						_gthis._soundIds.push(Reflect.field(res,n).name);
						var this1 = _gthis._soundsToLoad;
						var key = Reflect.field(res,n).name;
						var value = "data:" + Std.string(Reflect.field(res,n).mime) + ";base64," + Std.string(Reflect.field(res,n).data);
						var _this = this1;
						if(__map_reserved[key] != null) {
							_this.setReserved(key,value);
						} else {
							_this.h[key] = value;
						}
					} else {
						_gthis._soundIds.push(n);
						var this2 = _gthis._soundsToLoad;
						var value1 = Reflect.field(res,n);
						var _this1 = this2;
						if(__map_reserved[n] != null) {
							_this1.setReserved(n,value1);
						} else {
							_this1.h[n] = value1;
						}
					}
				}
				_gthis._soundCount = _gthis._soundIds.length;
				if(!_gthis._sequentialLoad) {
					while(_gthis._soundIds.length > 0) {
						var tmp = _gthis._soundIds.shift();
						_gthis._createSound(tmp);
					}
				} else {
					var tmp1 = _gthis._soundIds.shift();
					_gthis._createSound(tmp1);
				}
			}
		};
		xobj.send(null);
	}
	,_createSound: function(id) {
		var _gthis = this;
		var _this = this._soundsToLoad;
		new WaudSound(__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id],{ onload : function(s) {
			var _this1 = _gthis._sounds;
			if(__map_reserved[id] != null) {
				_this1.setReserved(id,s);
			} else {
				_this1.h[id] = s;
			}
			var _this2 = Waud.sounds;
			if(__map_reserved[id] != null) {
				_this2.setReserved(id,s);
			} else {
				_this2.h[id] = s;
			}
			if(_gthis._options.onload != null) {
				_gthis._options.onload(s);
			}
			_gthis._checkProgress();
		}, onerror : function(s1) {
			var _this3 = _gthis._sounds;
			if(__map_reserved[id] != null) {
				_this3.setReserved(id,null);
			} else {
				_this3.h[id] = null;
			}
			if(_gthis._options.onerror != null) {
				_gthis._options.onerror(s1);
			}
			if(_gthis._checkProgress() && _gthis._onError != null) {
				_gthis._onError();
			}
		}, autoplay : this._options.autoplay, autostop : this._options.autostop, loop : this._options.loop, onend : this._options.onend, playbackRate : this._options.playbackRate, preload : this._options.preload, volume : this._options.volume, webaudio : this._options.webaudio});
	}
	,_checkProgress: function() {
		this._loadCount++;
		if(this._onProgress != null) {
			this._onProgress(0.8 + 0.199999999999999956 * (this._loadCount / this._soundCount));
		}
		if(this._loadCount == this._soundCount) {
			this._soundsToLoad = null;
			if(this._onLoaded != null) {
				this._onLoaded(this._sounds);
			}
			return true;
		} else if(this._sequentialLoad) {
			this._createSound(this._soundIds.shift());
		}
		return false;
	}
	,__class__: WaudBase64Pack
};
var WaudFocusManager = $hx_exports["WaudFocusManager"] = function() {
	var _gthis = this;
	this._hidden = "";
	this._visibilityChange = "";
	this._currentState = "";
	if(Reflect.field(window.document,"hidden") != null) {
		this._hidden = "hidden";
		this._visibilityChange = "visibilitychange";
	} else if(Reflect.field(window.document,"mozHidden") != null) {
		this._hidden = "mozHidden";
		this._visibilityChange = "mozvisibilitychange";
	} else if(Reflect.field(window.document,"msHidden") != null) {
		this._hidden = "msHidden";
		this._visibilityChange = "msvisibilitychange";
	} else if(Reflect.field(window.document,"webkitHidden") != null) {
		this._hidden = "webkitHidden";
		this._visibilityChange = "webkitvisibilitychange";
	}
	if(Reflect.field(window,"addEventListener") != null) {
		window.addEventListener("focus",$bind(this,this._focus));
		window.addEventListener("blur",$bind(this,this._blur));
		window.addEventListener("pageshow",$bind(this,this._focus));
		window.addEventListener("pagehide",$bind(this,this._blur));
		document.addEventListener(this._visibilityChange,$bind(this,this._handleVisibilityChange));
	} else if(Reflect.field(window,"attachEvent") != null) {
		window.attachEvent("onfocus",$bind(this,this._focus));
		window.attachEvent("onblur",$bind(this,this._blur));
		window.attachEvent("pageshow",$bind(this,this._focus));
		window.attachEvent("pagehide",$bind(this,this._blur));
		document.attachEvent(this._visibilityChange,$bind(this,this._handleVisibilityChange));
	} else {
		window.onload = function() {
			window.onfocus = $bind(_gthis,_gthis._focus);
			window.onblur = $bind(_gthis,_gthis._blur);
			window.onpageshow = $bind(_gthis,_gthis._focus);
			window.onpagehide = $bind(_gthis,_gthis._blur);
		};
	}
};
WaudFocusManager.__name__ = true;
WaudFocusManager.prototype = {
	_handleVisibilityChange: function() {
		if(Reflect.field(window.document,this._hidden) != null && Reflect.field(window.document,this._hidden) && this.blur != null) {
			this.blur();
		} else if(this.focus != null) {
			this.focus();
		}
	}
	,_focus: function() {
		if(this._currentState != "focus" && this.focus != null) {
			this.focus();
		}
		this._currentState = "focus";
	}
	,_blur: function() {
		if(this._currentState != "blur" && this.blur != null) {
			this.blur();
		}
		this._currentState = "blur";
	}
	,clearEvents: function() {
		if(Reflect.field(window,"removeEventListener") != null) {
			window.removeEventListener("focus",$bind(this,this._focus));
			window.removeEventListener("blur",$bind(this,this._blur));
			window.removeEventListener("pageshow",$bind(this,this._focus));
			window.removeEventListener("pagehide",$bind(this,this._blur));
			window.removeEventListener(this._visibilityChange,$bind(this,this._handleVisibilityChange));
		} else if(Reflect.field(window,"removeEvent") != null) {
			window.removeEvent("onfocus",$bind(this,this._focus));
			window.removeEvent("onblur",$bind(this,this._blur));
			window.removeEvent("pageshow",$bind(this,this._focus));
			window.removeEvent("pagehide",$bind(this,this._blur));
			window.removeEvent(this._visibilityChange,$bind(this,this._handleVisibilityChange));
		} else {
			window.onfocus = null;
			window.onblur = null;
			window.onpageshow = null;
			window.onpagehide = null;
		}
	}
	,__class__: WaudFocusManager
};
var WaudSound = $hx_exports["WaudSound"] = function(url,options) {
	if(Waud.audioManager == null) {
		console.log("initialise Waud using Waud.init() before loading sounds");
		return;
	}
	this.rate = 1;
	this._options = options;
	if(url.indexOf(".json") > 0) {
		this.isSpriteSound = true;
		this._spriteDuration = 0;
		this._spriteSounds = new haxe_ds_StringMap();
		this._spriteSoundEndCallbacks = new haxe_ds_StringMap();
		this._loadSpriteJson(url);
	} else {
		this.isSpriteSound = false;
		this._init(url);
	}
	if(new EReg("(^data:audio).*(;base64,)","i").match(url)) {
		var this1 = Waud.sounds;
		var key = "snd" + new Date().getTime();
		var _this = this1;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,this);
		} else {
			_this.h[key] = this;
		}
		url = "";
	} else {
		var _this1 = Waud.sounds;
		if(__map_reserved[url] != null) {
			_this1.setReserved(url,this);
		} else {
			_this1.h[url] = this;
		}
	}
};
WaudSound.__name__ = true;
WaudSound.__interfaces__ = [IWaudSound];
WaudSound.prototype = {
	_loadSpriteJson: function(jsonUrl) {
		var _gthis = this;
		var xobj = new XMLHttpRequest();
		xobj.open("GET",jsonUrl,true);
		xobj.onreadystatechange = function() {
			if(xobj.readyState == 4 && xobj.status == 200) {
				_gthis._spriteData = JSON.parse(xobj.responseText);
				var src = _gthis._spriteData.src;
				if(jsonUrl.indexOf("/") > -1) {
					var src1 = jsonUrl.lastIndexOf("/") + 1;
					src = jsonUrl.substring(0,src1) + src;
				}
				_gthis._init(src);
			}
		};
		xobj.send(null);
	}
	,_init: function(soundUrl) {
		var _gthis = this;
		this.url = soundUrl;
		if(Waud.isWebAudioSupported && Waud.useWebAudio && (this._options == null || this._options.webaudio == null || this._options.webaudio)) {
			if(this.isSpriteSound) {
				this._loadSpriteSound(this.url);
			} else {
				this._snd = new WebAudioAPISound(this.url,this._options);
			}
		} else if(Waud.isHTML5AudioSupported) {
			if(this._spriteData != null && this._spriteData.sprite != null) {
				var loadCount = 0;
				var onLoad = this._options != null && this._options.onload != null ? this._options.onload : null;
				var onLoadSpriteSound = function(snd) {
					loadCount += 1;
					if(loadCount == _gthis._spriteData.sprite.length && onLoad != null) {
						onLoad(snd);
					}
				};
				var onErrorSpriteSound = function(snd1) {
					loadCount += 1;
					if(loadCount == _gthis._spriteData.sprite.length && onLoad != null) {
						onLoad(snd1);
					}
				};
				if(this._options == null) {
					this._options = { };
				}
				this._options.onload = onLoadSpriteSound;
				this._options.onerror = onErrorSpriteSound;
				var _g = 0;
				var _g1 = this._spriteData.sprite;
				while(_g < _g1.length) {
					var snd2 = _g1[_g];
					++_g;
					var sound = new HTML5Sound(this.url,this._options);
					sound.isSpriteSound = true;
					var key = snd2.name;
					var _this = this._spriteSounds;
					if(__map_reserved[key] != null) {
						_this.setReserved(key,sound);
					} else {
						_this.h[key] = sound;
					}
				}
			} else {
				this._snd = new HTML5Sound(this.url,this._options);
			}
		} else {
			console.log("no audio support in this browser");
			return;
		}
	}
	,getDuration: function() {
		if(this.isSpriteSound) {
			return this._spriteDuration;
		}
		if(this._snd == null) {
			return 0;
		}
		return this._snd.getDuration();
	}
	,setVolume: function(val,spriteName) {
		if(typeof(val) == "number" && ((val | 0) === val) || typeof(val) == "number") {
			if(this.isSpriteSound) {
				var tmp;
				if(spriteName != null) {
					var _this = this._spriteSounds;
					tmp = (__map_reserved[spriteName] != null ? _this.getReserved(spriteName) : _this.h[spriteName]) != null;
				} else {
					tmp = false;
				}
				if(tmp) {
					var _this1 = this._spriteSounds;
					(__map_reserved[spriteName] != null ? _this1.getReserved(spriteName) : _this1.h[spriteName]).setVolume(val);
				}
				return;
			}
			if(this._snd == null) {
				return;
			}
			this._snd.setVolume(val);
		} else {
			window.console.warn("Volume should be a number between 0 and 1. Received: " + val);
		}
	}
	,getVolume: function(spriteName) {
		if(this.isSpriteSound) {
			var tmp;
			if(spriteName != null) {
				var _this = this._spriteSounds;
				tmp = (__map_reserved[spriteName] != null ? _this.getReserved(spriteName) : _this.h[spriteName]) != null;
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this1 = this._spriteSounds;
				return (__map_reserved[spriteName] != null ? _this1.getReserved(spriteName) : _this1.h[spriteName]).getVolume();
			}
			return 0;
		}
		if(this._snd == null) {
			return 0;
		}
		return this._snd.getVolume();
	}
	,mute: function(val,spriteName) {
		if(this.isSpriteSound) {
			var tmp;
			if(spriteName != null) {
				var _this = this._spriteSounds;
				tmp = (__map_reserved[spriteName] != null ? _this.getReserved(spriteName) : _this.h[spriteName]) != null;
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this1 = this._spriteSounds;
				(__map_reserved[spriteName] != null ? _this1.getReserved(spriteName) : _this1.h[spriteName]).mute(val);
			} else {
				var _this2 = this._spriteSounds;
				var snd = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
				while(snd.hasNext()) {
					var snd1 = snd.next();
					snd1.mute(val);
				}
			}
			return;
		}
		if(this._snd == null) {
			return;
		}
		this._snd.mute(val);
	}
	,toggleMute: function(spriteName) {
		if(this.isSpriteSound) {
			var tmp;
			if(spriteName != null) {
				var _this = this._spriteSounds;
				tmp = (__map_reserved[spriteName] != null ? _this.getReserved(spriteName) : _this.h[spriteName]) != null;
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this1 = this._spriteSounds;
				(__map_reserved[spriteName] != null ? _this1.getReserved(spriteName) : _this1.h[spriteName]).toggleMute();
			} else {
				var _this2 = this._spriteSounds;
				var snd = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
				while(snd.hasNext()) {
					var snd1 = snd.next();
					snd1.toggleMute();
				}
			}
			return;
		}
		if(this._snd == null) {
			return;
		}
		this._snd.toggleMute();
	}
	,load: function(callback) {
		if(this._snd == null || this.isSpriteSound) {
			return null;
		}
		this._snd.load(callback);
		return this;
	}
	,isReady: function() {
		if(this.isSpriteSound) {
			var _this = this._spriteSounds;
			var snd = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(snd.hasNext()) {
				var snd1 = snd.next();
				return snd1.isReady();
			}
		}
		return this._snd.isReady();
	}
	,play: function(spriteName,soundProps) {
		if(this.isSpriteSound) {
			if(spriteName != null) {
				var _g = 0;
				var _g1 = this._spriteData.sprite;
				while(_g < _g1.length) {
					var snd = _g1[_g];
					++_g;
					if(snd.name == spriteName) {
						soundProps = snd;
						break;
					}
				}
				if(soundProps == null) {
					return null;
				}
				var _this = this._spriteSounds;
				if((__map_reserved[spriteName] != null ? _this.getReserved(spriteName) : _this.h[spriteName]) != null) {
					var _this1 = this._spriteSounds;
					return (__map_reserved[spriteName] != null ? _this1.getReserved(spriteName) : _this1.h[spriteName]).play(spriteName,soundProps);
				}
			} else {
				return null;
			}
		}
		if(this._snd == null) {
			return null;
		}
		return this._snd.play(spriteName,soundProps);
	}
	,togglePlay: function(spriteName) {
		if(this.isSpriteSound) {
			var tmp;
			if(spriteName != null) {
				var _this = this._spriteSounds;
				tmp = (__map_reserved[spriteName] != null ? _this.getReserved(spriteName) : _this.h[spriteName]) != null;
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this1 = this._spriteSounds;
				(__map_reserved[spriteName] != null ? _this1.getReserved(spriteName) : _this1.h[spriteName]).togglePlay();
			}
			return;
		}
		if(this._snd == null) {
			return;
		}
		this._snd.togglePlay();
	}
	,isPlaying: function(spriteName) {
		if(this.isSpriteSound) {
			var tmp;
			if(spriteName != null) {
				var _this = this._spriteSounds;
				tmp = (__map_reserved[spriteName] != null ? _this.getReserved(spriteName) : _this.h[spriteName]) != null;
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this1 = this._spriteSounds;
				return (__map_reserved[spriteName] != null ? _this1.getReserved(spriteName) : _this1.h[spriteName]).isPlaying();
			}
			return false;
		}
		if(this._snd == null) {
			return false;
		}
		return this._snd.isPlaying();
	}
	,loop: function(val) {
		if(this._snd == null || this.isSpriteSound) {
			return;
		}
		this._snd.loop(val);
	}
	,autoStop: function(val) {
		if(this._snd == null) {
			return;
		}
		this._snd.autoStop(val);
	}
	,stop: function(spriteName) {
		if(this.isSpriteSound) {
			var tmp;
			if(spriteName != null) {
				var _this = this._spriteSounds;
				tmp = (__map_reserved[spriteName] != null ? _this.getReserved(spriteName) : _this.h[spriteName]) != null;
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this1 = this._spriteSounds;
				(__map_reserved[spriteName] != null ? _this1.getReserved(spriteName) : _this1.h[spriteName]).stop();
			} else {
				var _this2 = this._spriteSounds;
				var snd = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
				while(snd.hasNext()) {
					var snd1 = snd.next();
					snd1.stop();
				}
			}
		} else if(this._snd != null) {
			this._snd.stop();
		}
	}
	,pause: function(spriteName) {
		if(this.isSpriteSound) {
			var tmp;
			if(spriteName != null) {
				var _this = this._spriteSounds;
				tmp = (__map_reserved[spriteName] != null ? _this.getReserved(spriteName) : _this.h[spriteName]) != null;
			} else {
				tmp = false;
			}
			if(tmp) {
				var _this1 = this._spriteSounds;
				(__map_reserved[spriteName] != null ? _this1.getReserved(spriteName) : _this1.h[spriteName]).pause();
			} else {
				var _this2 = this._spriteSounds;
				var snd = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
				while(snd.hasNext()) {
					var snd1 = snd.next();
					snd1.pause();
				}
			}
		} else if(this._snd != null) {
			this._snd.pause();
		}
	}
	,playbackRate: function(val,spriteName) {
		if(val != null) {
			if(this.isSpriteSound) {
				var tmp;
				if(spriteName != null) {
					var _this = this._spriteSounds;
					tmp = (__map_reserved[spriteName] != null ? _this.getReserved(spriteName) : _this.h[spriteName]) != null;
				} else {
					tmp = false;
				}
				if(tmp) {
					var _this1 = this._spriteSounds;
					(__map_reserved[spriteName] != null ? _this1.getReserved(spriteName) : _this1.h[spriteName]).playbackRate(val);
				} else {
					var _this2 = this._spriteSounds;
					var snd = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
					while(snd.hasNext()) {
						var snd1 = snd.next();
						snd1.playbackRate(val);
					}
				}
			} else if(this._snd != null) {
				this._snd.playbackRate(val);
			}
			return this.rate = val;
		}
		return this.rate;
	}
	,setTime: function(time) {
		if(this._snd == null || this.isSpriteSound) {
			return;
		}
		this._snd.setTime(time);
	}
	,getTime: function() {
		if(this._snd == null || this.isSpriteSound) {
			return 0;
		}
		return this._snd.getTime();
	}
	,onEnd: function(callback,spriteName) {
		if(this.isSpriteSound) {
			if(spriteName != null) {
				var _this = this._spriteSoundEndCallbacks;
				if(__map_reserved[spriteName] != null) {
					_this.setReserved(spriteName,callback);
				} else {
					_this.h[spriteName] = callback;
				}
			}
			return this;
		} else if(this._snd != null) {
			this._snd.onEnd(callback);
			return this;
		}
		return null;
	}
	,onLoad: function(callback) {
		if(this._snd == null || this.isSpriteSound) {
			return null;
		}
		this._snd.onLoad(callback);
		return this;
	}
	,onError: function(callback) {
		if(this._snd == null || this.isSpriteSound) {
			return null;
		}
		this._snd.onError(callback);
		return this;
	}
	,destroy: function() {
		if(this.isSpriteSound) {
			var _this = this._spriteSounds;
			var snd = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(snd.hasNext()) {
				var snd1 = snd.next();
				snd1.destroy();
			}
		} else if(this._snd != null) {
			this._snd.destroy();
			this._snd = null;
		}
	}
	,_loadSpriteSound: function(url) {
		var request = new XMLHttpRequest();
		request.open("GET",url,true);
		request.responseType = "arraybuffer";
		request.onload = $bind(this,this._onSpriteSoundLoaded);
		request.onerror = $bind(this,this._onSpriteSoundError);
		request.send();
	}
	,_onSpriteSoundLoaded: function(evt) {
		Waud.audioManager.audioContext.decodeAudioData(evt.target.response,$bind(this,this._decodeSuccess),$bind(this,this._onSpriteSoundError));
	}
	,_onSpriteSoundError: function() {
		if(this._options != null && this._options.onerror != null) {
			this._options.onerror(this);
		}
	}
	,_decodeSuccess: function(buffer) {
		if(buffer == null) {
			this._onSpriteSoundError();
			return;
		}
		var key = this.url;
		var _this = Waud.audioManager.bufferList;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,buffer);
		} else {
			_this.h[key] = buffer;
		}
		this._spriteDuration = buffer.duration;
		if(this._options != null && this._options.onload != null) {
			this._options.onload(this);
		}
		var _g = 0;
		var _g1 = this._spriteData.sprite;
		while(_g < _g1.length) {
			var snd = _g1[_g];
			++_g;
			var sound = new WebAudioAPISound(this.url,this._options,true,buffer.duration);
			sound.isSpriteSound = true;
			var key1 = snd.name;
			var _this1 = this._spriteSounds;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,sound);
			} else {
				_this1.h[key1] = sound;
			}
			sound.onEnd($bind(this,this._spriteOnEnd),snd.name);
		}
	}
	,_spriteOnEnd: function(snd) {
		var key = snd.spriteName;
		var _this = this._spriteSoundEndCallbacks;
		if((__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]) != null) {
			var key1 = snd.spriteName;
			var _this1 = this._spriteSoundEndCallbacks;
			(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1])(snd);
		}
	}
	,__class__: WaudSound
};
var WaudUtils = $hx_exports["WaudUtils"] = function() { };
WaudUtils.__name__ = true;
WaudUtils.isAndroid = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	return new EReg("Android","i").match(ua);
};
WaudUtils.isiOS = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	return new EReg("(iPad|iPhone|iPod)","i").match(ua);
};
WaudUtils.isWindowsPhone = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	return new EReg("(IEMobile|Windows Phone)","i").match(ua);
};
WaudUtils.isFirefox = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	return new EReg("Firefox","i").match(ua);
};
WaudUtils.isOpera = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	if(!new EReg("Opera","i").match(ua)) {
		return Reflect.field(window,"opera") != null;
	} else {
		return true;
	}
};
WaudUtils.isChrome = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	return new EReg("Chrome","i").match(ua);
};
WaudUtils.isSafari = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	return new EReg("Safari","i").match(ua);
};
WaudUtils.isMobile = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	return new EReg("(iPad|iPhone|iPod|Android|webOS|BlackBerry|Windows Phone|IEMobile)","i").match(ua);
};
WaudUtils.getiOSVersion = function(ua) {
	if(ua == null) {
		ua = window.navigator.userAgent;
	}
	var v = new EReg("[0-9_]+?[0-9_]+?[0-9_]+","i");
	var matched = [];
	if(v.match(ua)) {
		var match = v.matched(0).split("_");
		var _g = [];
		var _g1 = 0;
		while(_g1 < match.length) {
			var i = match[_g1];
			++_g1;
			_g.push(Std.parseInt(i));
		}
		matched = _g;
	}
	return matched;
};
WaudUtils.setDefaultOptions = function(options) {
	if(options == null) {
		options = { };
	}
	options.autoplay = options.autoplay != null ? options.autoplay : Waud.defaults.autoplay;
	options.autostop = options.autostop != null ? options.autostop : Waud.defaults.autostop;
	options.webaudio = options.webaudio != null ? options.webaudio : Waud.defaults.webaudio;
	options.preload = options.preload != null ? options.preload : Waud.defaults.preload;
	options.loop = options.loop != null ? options.loop : Waud.defaults.loop;
	options.onload = options.onload != null ? options.onload : Waud.defaults.onload;
	options.onend = options.onend != null ? options.onend : Waud.defaults.onend;
	options.onerror = options.onerror != null ? options.onerror : Waud.defaults.onerror;
	if(options.volume == null || options.volume < 0 || options.volume > 1) {
		options.volume = Waud.defaults.volume;
	}
	if(options.playbackRate == null || options.playbackRate <= 0 || options.playbackRate >= 4) {
		options.playbackRate = Waud.defaults.playbackRate;
	}
	return options;
};
var WebAudioAPISound = function(url,options,loaded,d) {
	if(d == null) {
		d = 0;
	}
	if(loaded == null) {
		loaded = false;
	}
	BaseSound.call(this,url,options);
	this._playStartTime = 0;
	this._pauseTime = 0;
	this._srcNodes = [];
	this._gainNodes = [];
	this._currentSoundProps = null;
	this._isLoaded = loaded;
	this._duration = d;
	this._manager = Waud.audioManager;
	if(this._b64.match(url)) {
		var data = this._base64ToArrayBuffer(url);
		this._manager.audioContext.decodeAudioData(data,$bind(this,this._decodeSuccess),$bind(this,this._error));
		url = "";
	} else if(this._options.preload && !loaded) {
		this.load();
	}
};
WebAudioAPISound.__name__ = true;
WebAudioAPISound.__interfaces__ = [IWaudSound];
WebAudioAPISound.__super__ = BaseSound;
WebAudioAPISound.prototype = $extend(BaseSound.prototype,{
	load: function(callback) {
		if(!this._isLoaded) {
			var request = new XMLHttpRequest();
			request.open("GET",this.url,true);
			request.responseType = "arraybuffer";
			request.onload = $bind(this,this._onSoundLoaded);
			request.onerror = $bind(this,this._error);
			request.send();
			if(callback != null) {
				this._options.onload = callback;
			}
		}
		return this;
	}
	,_base64ToArrayBuffer: function(base64) {
		var raw = window.atob(base64.split(",")[1]);
		var rawLength = raw.length;
		var array = new Uint8Array(new ArrayBuffer(rawLength));
		var _g1 = 0;
		var _g = rawLength;
		while(_g1 < _g) {
			var i = _g1++;
			array[i] = HxOverrides.cca(raw,i);
		}
		return array.buffer;
	}
	,_onSoundLoaded: function(evt) {
		this._manager.audioContext.decodeAudioData(evt.target.response,$bind(this,this._decodeSuccess),$bind(this,this._error));
	}
	,_decodeAudio: function(data) {
		this._manager.audioContext.decodeAudioData(data,$bind(this,this._decodeSuccess),$bind(this,this._error));
	}
	,_error: function() {
		if(this._options.onerror != null) {
			this._options.onerror(this);
		}
	}
	,_decodeSuccess: function(buffer) {
		if(buffer == null) {
			console.log("empty buffer: " + this.url);
			this._error();
			return;
		}
		var key = this.url;
		var _this = this._manager.bufferList;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,buffer);
		} else {
			_this.h[key] = buffer;
		}
		this._isLoaded = true;
		this._duration = buffer.duration;
		if(this._options.onload != null) {
			this._options.onload(this);
		}
		if(this._options.autoplay) {
			this.play();
		}
	}
	,_makeSource: function(buffer) {
		var bufferSource = this._manager.audioContext.createBufferSource();
		bufferSource.buffer = buffer;
		this._gainNode = this._manager.createGain();
		bufferSource.connect(this._gainNode);
		bufferSource.playbackRate.value = this.rate;
		this._gainNode.connect(this._manager.masterGainNode);
		this._manager.masterGainNode.connect(this._manager.audioContext.destination);
		this._srcNodes.push(bufferSource);
		this._gainNodes.push(this._gainNode);
		if(this._muted) {
			this._gainNode.gain.value = 0;
		} else {
			this._gainNode.gain.value = this._options.volume;
		}
		return bufferSource;
	}
	,getDuration: function() {
		if(!this._isLoaded) {
			return 0;
		}
		return this._duration;
	}
	,play: function(sprite,soundProps) {
		var _gthis = this;
		this.spriteName = sprite;
		if(this._isPlaying && this._options.autostop) {
			this.stop(this.spriteName);
		}
		if(!this._isLoaded) {
			console.log("sound not loaded");
			return -1;
		}
		var start = 0;
		var end = -1;
		if(this.isSpriteSound && soundProps != null) {
			this._currentSoundProps = soundProps;
			start = soundProps.start + this._pauseTime;
			end = soundProps.duration;
		}
		var buffer;
		if(this._manager.bufferList != null) {
			var key = this.url;
			var _this = this._manager.bufferList;
			if(__map_reserved[key] != null) {
				buffer = _this.getReserved(key);
			} else {
				buffer = _this.h[key];
			}
		} else {
			buffer = null;
		}
		if(buffer != null) {
			this.source = this._makeSource(buffer);
			if(start >= 0 && end > -1) {
				this._start(0,start,end);
			} else {
				this._start(0,this._pauseTime,this.source.buffer.duration);
				this.source.loop = this._options.loop;
			}
			this._playStartTime = this._manager.audioContext.currentTime;
			this._isPlaying = true;
			this.source.onended = function() {
				_gthis._pauseTime = 0;
				_gthis._isPlaying = false;
				if(_gthis.isSpriteSound && soundProps != null && soundProps.loop != null && soundProps.loop && start >= 0 && end > -1) {
					_gthis.destroy();
					_gthis.play(_gthis.spriteName,soundProps);
				} else if(_gthis._options.onend != null) {
					_gthis._options.onend(_gthis);
				}
			};
		}
		return this._srcNodes.indexOf(this.source);
	}
	,_start: function(when,offset,duration) {
		if(Reflect.field(this.source,"start") != null) {
			this.source.start(when,offset,duration);
		} else if(Reflect.field(this.source,"noteGrainOn") != null) {
			var o = this.source;
			Reflect.field(this.source,"noteGrainOn").apply(o,[when,offset,duration]);
		} else if(Reflect.field(this.source,"noteOn") != null) {
			var o1 = this.source;
			Reflect.field(this.source,"noteOn").apply(o1,[when,offset,duration]);
		}
	}
	,togglePlay: function(spriteName) {
		if(this._isPlaying) {
			this.pause();
		} else {
			this.play();
		}
	}
	,isPlaying: function(spriteName) {
		return this._isPlaying;
	}
	,loop: function(val) {
		this._options.loop = val;
		if(this.source != null) {
			this.source.loop = val;
		}
	}
	,setVolume: function(val,spriteName) {
		this._options.volume = val;
		if(this._gainNode == null || !this._isLoaded || this._muted) {
			return;
		}
		this._gainNode.gain.value = this._options.volume;
	}
	,getVolume: function(spriteName) {
		return this._options.volume;
	}
	,mute: function(val,spriteName) {
		this._muted = val;
		if(this._gainNode == null || !this._isLoaded) {
			return;
		}
		if(val) {
			this._gainNode.gain.value = 0;
		} else {
			this._gainNode.gain.value = this._options.volume;
		}
	}
	,toggleMute: function(spriteName) {
		this.mute(!this._muted);
	}
	,autoStop: function(val) {
		this._options.autostop = val;
	}
	,stop: function(spriteName) {
		this._pauseTime = 0;
		if(this.source == null || !this._isLoaded || !this._isPlaying) {
			return;
		}
		this.destroy();
	}
	,pause: function(spriteName) {
		if(this.source == null || !this._isLoaded || !this._isPlaying) {
			return;
		}
		this.destroy();
		this._pauseTime += this._manager.audioContext.currentTime - this._playStartTime;
	}
	,playbackRate: function(val,spriteName) {
		if(val == null) {
			return this.rate;
		}
		var _g = 0;
		var _g1 = this._srcNodes;
		while(_g < _g1.length) {
			var src = _g1[_g];
			++_g;
			src.playbackRate.value = val;
		}
		return this.rate = val;
	}
	,setTime: function(time) {
		if(!this._isLoaded || time > this._duration) {
			return;
		}
		if(this._isPlaying) {
			this.stop();
			this._pauseTime = time;
			this.play();
		} else {
			this._pauseTime = time;
		}
	}
	,getTime: function() {
		if(this.source == null || !this._isLoaded || !this._isPlaying) {
			return 0;
		}
		return this._manager.audioContext.currentTime - this._playStartTime + this._pauseTime;
	}
	,onEnd: function(callback,spriteName) {
		this._options.onend = callback;
		return this;
	}
	,onLoad: function(callback) {
		this._options.onload = callback;
		return this;
	}
	,onError: function(callback) {
		this._options.onerror = callback;
		return this;
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this._srcNodes;
		while(_g < _g1.length) {
			var src = _g1[_g];
			++_g;
			if(Reflect.field(src,"stop") != null) {
				src.stop(0);
			} else if(Reflect.field(src,"noteOff") != null) {
				Reflect.field(src,"noteOff").apply(src,[0]);
			}
			src.disconnect();
			src = null;
		}
		var _g2 = 0;
		var _g11 = this._gainNodes;
		while(_g2 < _g11.length) {
			var gain = _g11[_g2];
			++_g2;
			gain.disconnect();
			gain = null;
		}
		this._srcNodes = [];
		this._gainNodes = [];
		this._isPlaying = false;
	}
	,__class__: WebAudioAPISound
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
AudioManager.AUDIO_CONTEXT = "this.audioContext";
Waud.PROBABLY = "probably";
Waud.MAYBE = "maybe";
Waud.version = "0.9.9";
Waud.useWebAudio = true;
Waud.defaults = { autoplay : false, autostop : true, loop : false, preload : true, webaudio : true, volume : 1, playbackRate : 1};
Waud.preferredSampleRate = 44100;
Waud.isMuted = false;
Waud._playbackRate = 1;
WaudBase64Pack.JSON_PER = 0.8;
WaudFocusManager.FOCUS_STATE = "focus";
WaudFocusManager.BLUR_STATE = "blur";
WaudFocusManager.ON_FOCUS = "onfocus";
WaudFocusManager.ON_BLUR = "onblur";
WaudFocusManager.PAGE_SHOW = "pageshow";
WaudFocusManager.PAGE_HIDE = "pagehide";
WaudFocusManager.WINDOW = "window";
WaudFocusManager.DOCUMENT = "document";
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
AudioPlayer.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
